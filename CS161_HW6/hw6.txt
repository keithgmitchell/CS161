HW # 6 Text File

Keith Mitchell
704281781

_____________________________________________________________________________
1)For each pair of atomic sentences, give the most general unifier if it exists: (under which variable circumstances are they the same)
	A: P(A, B, B), P(x, y, z)
		-> {z/B, y/B, x/A}
	B: Q(y, G(A, B)), Q(G(x, x), y)
		-> Since y would have to be G(x, x) and G(A, B) where x can only be one of the two then then we can see that there is no unifier. 
	C: R(x,A,z), R(B,y,z)
		-> {x/B, y/A}
	D: Older (Father(y), y), Older (Father(x), John)
		-> {y/x, x/John}
	E: Knows(Father(y),y), Knows(x,x)
		-> Since x would have to be Father(y) or y, but cannot be both then the there is no unifier

_____________________________________________________________________________
2) Consider the following sentences:
		1: John likes all kinds of food.
		2: Apples are food.
		3: Chicken is food.
		4: Anything anyone eats and isnt killed by is food.
		5: If you are killed by something you are not alive.
		6: Bill eats peanuts and is still alive. *<-Why asteric?
		7: Sue eats everything Bill eats.  

 (A x) = for all x
 (E x) = for at least one x
 (!E x) = for exactly one x



	A: Translate these sentences into formulas in first-order logic.
		1. ((A x)  (IsFood(x) => Likes(x, John)))
		2. IsFood(Apple)
		3. IsFood(Chicken)
		4. ((A x)(A y) (Eats(x, y) & !Dead(y) => IsFood(x)))
				y = person and x = food
		5. ((A x)(A y) (Eats(x, y) & Dead(y) => !IsFood(x)))
		6. Eats(Peanuts, Bill) 
		7. !Dead(Bill)
		8. ((A x) (Eats(x, Bill) => Eats(x, Sue)))

	B: Convert the formulas of part (a) into CNF or clausual form.
		1. !IsFood(x) | Likes(x, John)
		2. IsFood(Apple)
		3. IsFood(Chicken)
		4. !(Eats(x,y) & !Dead(y)) | IsFood(x)     converts by De Morgans
		   !Eats(x,y) | Dead(y) | IsFood(x)
		5. !(Eats(x,y) & Dead(y)) | !IsFood(x)     converts by De Morgans
		   !Eats(x,y) | !Dead(y) | !IsFood(x)
		6. Eats(Peanuts, Bill)
		7. !Dead(Bill)
		8. !Eats(x, Bill) | Eats(x, Sue)

	C: Prove John likes peanuts using resolution.
		8.  (4) !Eats(x, y) | Dead(y) | IsFood(x)
		    (6) Eats(Peanuts, Bill)
		     {x/Peanuts, y/Bill} 
		     == Dead(Bill) | IsFood(Peanuts)
		9.  (8) Dead(Bill) | IsFood(Peanuts)
		    (7) !Dead(Bill)
		     == IsFood(Peanuts)

	D: Use resolution to answer "What food does Sue Eat?"
		10. (6) Eats(Peanuts, Bill)
			(8) !Eats(Peanuts, Bill) | Eats(Peanuts, Sue)
			 {x/Peanuts}
			 == Eats(Peanuts, Sue)

	E: Use resolution to answer (d) if, instead of the axiom with a asterick above we had 
		i) If you dont eat, you die.       (6)
			- (A x) !Eats(x,y) => Dead(y)
		ii) If you die, you are not alive. (7)
			- Dead(y) => Dead(y)
		iii) Bill is alive.                (8)
			-!Dead(Bill)

		1. !IsFood(x) | Likes(x, John)
		2. IsFood(Apple)
		3. IsFood(Chicken)
		4. !Eats(x,y) | Dead(y) | IsFood(x)
		5. !Eats(x,y) | !Dead(y) | !IsFood(x)
		6. Eats(x,y) | Dead(y)
		7. !Dead(y) | Dead(y)
		8. !Dead(Bill)
		9. !Eats(x, Bill) | Eats(x, Sue)

		------------------------------------
		First lets consider {y/Bill}
		-------------------------------------
		10. (6) Eats(x,y) | Dead(y)
			(8) !Dead(Bill)
			== Eats(x,y)

		11. (9) !Eats(x,Bill) | Eats(x,Sue)
			(10) Eats(x,y) 
			== Eats(x,Sue)

			So Sue may eat things that Ben eats, in this case x.




___________________________________________________________________________________
3) With consideration to graph 1:
	- 3 colors can not satisfy the coloring problem. 
	- 4 colors will satsify the problem (becuase the max number of connections for a node is 4)

   With consideration to graph 2:
   	- Despite my best efforts, I was actually unable to get the rsat program to work properly unfortunately. 
